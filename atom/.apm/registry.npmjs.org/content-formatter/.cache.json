{"_id":"content-formatter","_rev":"4-861e80195591d49550740e004d8194ee","name":"content-formatter","description":"My premium module","dist-tags":{"latest":"1.1.0"},"versions":{"0.0.1":{"name":"content-formatter","version":"0.0.1","description":"My premium module","license":"MIT","repository":{"type":"git","url":"https://github.com/natecavanaugh/content-formatter"},"author":{"name":"Nate Cavanaugh","email":"nate@shift22.com","url":"alterform.com"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"files":["index.js"],"keywords":[],"dependencies":{"lodash":"^3.10.0","string-sub":"0.0.1"},"devDependencies":{"mocha":"*","chai":"*","chai-string":"*","coveralls":"*","gulp-coveralls":"*","gulp-istanbul":"*","istanbul":"*","sinon":"*","gulp":"*","gulp-load-plugins":"*","gulp-help":"*","run-sequence":"*","gulp-mocha":"*"},"gitHead":"02c0ffad2242b30ef54132f7a15e5abcbf8e4bbb","bugs":{"url":"https://github.com/natecavanaugh/content-formatter/issues"},"homepage":"https://github.com/natecavanaugh/content-formatter","_id":"content-formatter@0.0.1","_shasum":"45c89c10900f204bd9761347d8fb66380a7dec50","_from":".","_npmVersion":"2.4.1","_nodeVersion":"0.12.7","_npmUser":{"name":"natecavanaugh","email":"nate@shift22.com"},"maintainers":[{"name":"natecavanaugh","email":"nate@shift22.com"}],"dist":{"shasum":"45c89c10900f204bd9761347d8fb66380a7dec50","tarball":"http://registry.npmjs.org/content-formatter/-/content-formatter-0.0.1.tgz"},"directories":{}},"1.0.0":{"name":"content-formatter","version":"1.0.0","description":"My premium module","license":"MIT","repository":{"type":"git","url":"https://github.com/natecavanaugh/content-formatter"},"author":{"name":"Nate Cavanaugh","email":"nate@shift22.com","url":"alterform.com"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coveralls":"gulp coveralls"},"files":["index.js"],"keywords":[],"dependencies":{"lodash":"^3.10.0","string-sub":"0.0.1"},"devDependencies":{"mocha":"*","chai":"*","chai-string":"*","coveralls":"*","gulp-coveralls":"*","gulp-istanbul":"*","istanbul":"*","sinon":"*","gulp":"*","gulp-load-plugins":"*","gulp-help":"*","run-sequence":"*","gulp-mocha":"*"},"gitHead":"2968a12a832a0825f87f901eeb05f98ca2f8b966","bugs":{"url":"https://github.com/natecavanaugh/content-formatter/issues"},"homepage":"https://github.com/natecavanaugh/content-formatter","_id":"content-formatter@1.0.0","_shasum":"4e0ae1234b2baac6f4713d4b65f358e80972bdae","_from":".","_npmVersion":"2.4.1","_nodeVersion":"0.12.7","_npmUser":{"name":"natecavanaugh","email":"nate@shift22.com"},"maintainers":[{"name":"natecavanaugh","email":"nate@shift22.com"}],"dist":{"shasum":"4e0ae1234b2baac6f4713d4b65f358e80972bdae","tarball":"http://registry.npmjs.org/content-formatter/-/content-formatter-1.0.0.tgz"},"directories":{}},"1.0.1":{"name":"content-formatter","version":"1.0.1","description":"My premium module","license":"MIT","repository":{"type":"git","url":"https://github.com/natecavanaugh/content-formatter"},"author":{"name":"Nate Cavanaugh","email":"nate@shift22.com","url":"alterform.com"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","coveralls":"gulp coveralls"},"files":["index.js","lib"],"keywords":[],"dependencies":{"lodash":"^3.10.0","string-sub":"0.0.1"},"devDependencies":{"mocha":"*","chai":"*","chai-string":"*","coveralls":"*","gulp-coveralls":"*","gulp-istanbul":"*","istanbul":"*","sinon":"*","gulp":"*","gulp-load-plugins":"*","gulp-help":"*","run-sequence":"*","gulp-mocha":"*"},"gitHead":"3d93c6fba758788ba6623bef0803fd68792b7fa3","bugs":{"url":"https://github.com/natecavanaugh/content-formatter/issues"},"homepage":"https://github.com/natecavanaugh/content-formatter","_id":"content-formatter@1.0.1","_shasum":"952591e09a9eeb415e428e71f25398e70165314c","_from":".","_npmVersion":"2.4.1","_nodeVersion":"0.12.7","_npmUser":{"name":"natecavanaugh","email":"nate@shift22.com"},"maintainers":[{"name":"natecavanaugh","email":"nate@shift22.com"}],"dist":{"shasum":"952591e09a9eeb415e428e71f25398e70165314c","tarball":"http://registry.npmjs.org/content-formatter/-/content-formatter-1.0.1.tgz"},"directories":{}},"1.1.0":{"name":"content-formatter","version":"1.1.0","description":"My premium module","license":"MIT","repository":{"type":"git","url":"https://github.com/natecavanaugh/content-formatter"},"author":{"name":"Nate Cavanaugh","email":"nate@shift22.com","url":"alterform.com"},"engines":{"node":">=0.10.0"},"scripts":{"coveralls":"gulp coveralls","test":"gulp test-coverage"},"files":["index.js","lib"],"keywords":[],"dependencies":{"drip":"^1.4.0","lodash":"^3.10.0","string-sub":"0.0.1"},"devDependencies":{"mocha":"*","chai":"*","chai-string":"*","coveralls":"*","gulp-coveralls":"*","gulp-istanbul":"*","istanbul":"*","sinon":"*","gulp":"*","gulp-load-plugins":"*","gulp-help":"*","run-sequence":"*","gulp-mocha":"*"},"gitHead":"54e6f714c383e0b9b70c07d4fb30009f90f907f9","bugs":{"url":"https://github.com/natecavanaugh/content-formatter/issues"},"homepage":"https://github.com/natecavanaugh/content-formatter","_id":"content-formatter@1.1.0","_shasum":"378fc8e080c617fa40bcdfc6c1d88c349e34c1fa","_from":".","_npmVersion":"2.4.1","_nodeVersion":"0.12.7","_npmUser":{"name":"natecavanaugh","email":"nate@shift22.com"},"maintainers":[{"name":"natecavanaugh","email":"nate@shift22.com"}],"dist":{"shasum":"378fc8e080c617fa40bcdfc6c1d88c349e34c1fa","tarball":"http://registry.npmjs.org/content-formatter/-/content-formatter-1.1.0.tgz"},"directories":{}}},"readme":"# Content Formatter\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> A base module with which to create a custom file formatter.\n\nThis module is fairly simple, and on it's own, doesn't do much. However, it allows you to therefore do *anything*.\nA base formatter has a very simple API, which is a `format` method and a `log` method.\nWhy would you want this sort of thing? Mainly, we're using it as a piece of our [check-source-formatter](http://github.com/natecavanaugh/check-source-formatting) module and our [convert-bootstrap-2-to-3](http://github.com/natecavanaugh/convert-bootstrap-2-to-3) module.\n\n## Install\n\n```\n$ npm install --save content-formatter\n```\n\n\n## Usage\n\n### Creating a formatter\n\n```js\nvar Formatter = require('content-formatter');\n\nvar JSFormatter = Formatter.create({\n\tincludes: /\\.js$/,\n\tid: 'JS'\n});\n\nvar jsFormatter = new JSFormatter('test.js');\n\nvar fs = require('fs');\nvar contents = fs.readFileSync('test.js');\n\nvar newContents = jsFormatter.format(contents);\n```\n\nOne thing you may notice in the above example is that you need to handle reading the content on your own. This is so that you have more flexibility on where your content comes from (perhaps you're reading from a database, or some other data source).\n\n`Formatter.create` takes an object that, at the bare minimum, requires only 2 properties: `includes` and `id`.\n\nThis method returns the constructor of your custom formatter.\n\nYou can think of `includes` as the test that gets run over what ever path you pass into the constructor (and in the same way that the path could be anything, the `includes` could also be any sort of test for that path).\nThis allows you to specify that you want your formatter to only run on certain types of data.\n\nAlso of note, in addition to `includes`, you can also pass an `excludes` regex, which will allow you to negate the `includes` regex. This is useful to filter out items where JavaScript's regex is more limited.\nFor instance, if you wanted to include all `.js` files, but exclude any minified files, you could do something like\n```js\nFormatter.create({\n\tincludes: /\\.js$/,\n\texcludes: /[_.-]min\\.js$/,\n\tid: 'JS'\n});\n```\n\nHowever, just using those two properties doesn't give you much by way of functionality.\n\nSo the other properties you can pass into `Formatter.create` are `constructor` (this will be used as the constructor of your formatter, instead of the default one) and `prototype`, which is an object you can add the instance methods of your formatter on.\n\nSo, for instance:\n```js\nvar Formatter = require('content-formatter');\n\nvar JSFormatter = Formatter.create({\n\tincludes: /\\.js$/,\n\tid: 'JS'\n\tconstructor: function() {\n\t\tconsole.log('This is a constructor');\n\n\t\t// Make sure to include this, or stuff will go wrong\n\t\treturn Formatter.apply(this, arguments);\n\t},\n\tprototype: {\n\t\t// define your custom formatter\n\t\tformat: function(contents) {\n\t\t\tif (contents.indexOf('#!') === 0) {\n\t\t\t\t// this is a shell script\n\t\t\t\tthis.log(1, 'This is a shell script');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcontents = contents.toLowerCase();\n\t\t\t}\n\n\t\t\treturn contents;\n\t\t}\n\t}\n});\n\nvar jsFormatter = new JSFormatter('test.js');\n// 'This is a constructor'\n\nconsole.log(jsFormatter.format('FOO_BAR'));\n// 'foo_bar'\n\nconsole.log(jsFormatter.format('#! /usr/bin/env node'));\n// 'This is a shell script'\n// '#! /usr/bin/env node'\n```\n\nThis may seem like a really verbose way to handle such a simple use case, but this module is mainly designed as a base API layer to enforce a certain contract.\n\nIf you do not wish to pass a `constructor`, but yet want to have a method called when you instantiate the object (for instance, if the pomp and circumstance of always having to do `return Formatter.apply(this, arguments);` get's old), then you can define an `init` method on the `prototype` object, and when you call `new formatter('foo.js')`, it will be called with the same arguments passed into the constructor.\n\n\n### Getting the appropriate formatter\nLet's say you have a bunch of formatters defined in your code, but don't want to check each one manually to see if it should format the contents of the path.\n`Formatter.get` is a static method that will loop through all registered formatters and return to you an instance of the first one that passes the `includes` test.\nIt accepts all of the arguments that a normal `Formatter` constructor would have, but it instantiates the class for you, and gives you back that instance.\n\nFor example, using the module from above:\n\n```js\nvar Formatter = require('content-formatter');\n\nvar jsFormatter = Formatter.get('test.js');\njsFormatter.format(contents);\n```\n\n## API\n\n### `Formatter` constructor\n\n```js\nnew Formatter(path, [logger, flags])\n```\n\nThe constructor of the `Formatter` expects to take a path, and optionally, a custom logger can be passed, as well as flags to the formatter.\nThe only flag that is currently used (by `Formatter.get`), is `force`, which will force the formatter to run, even if the `excludes` tell it not to.\n\n### `Formatter.prototype.format`\n\nThis is the powerhouse of the formatter, and it's wide open for you to do anything with it.\nYou can delegate to other methods, and do anything you please.\nBy default, it expects a string of contents, and to return new contents (though, your implementation could always allow for a callback to be passed that could return the new contents).\n\n### `Formatter.prototype.log`\nThis is the basic logging method. If no custom logger was passed in, it will default to `Formatter.DEFAULT_LOGGER`, which, by default, is set to `console`.\nHowever, `Formatter.DEFAULT_LOGGER` can be passed any object that has a `log` method on it.\nBy default, the log method takes the following arguments:\n\n```js\njsFormatter.log(line, msg, [type, props]);\n```\nWhat's eventually passed to the internal logger though, is the following:\n`line, msg, path, type, props`\n\nYour implementation can overwrite this, and send whatever it likes, but we use this most commonly with logging out which line is causing an issue. But again, that's just the defaults.\n\n\n\n###\n\n## TODO\n- I'm currently thinking through a way for multiple formatters to run, instead of having it be only one per include type.\n- I would like to also remove the requirement of passing an ID for a formatter. If multiple filters eventually can run, it's pointless to have an ID (even now, I think it isn't really needed).\n\n## License\n\nMIT © [Nate Cavanaugh](http://alterform.com)\n\n[npm-image]: https://img.shields.io/npm/v/content-formatter.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/content-formatter\n[travis-image]: https://img.shields.io/travis/natecavanaugh/content-formatter/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/natecavanaugh/content-formatter\n[coveralls-image]: https://img.shields.io/coveralls/natecavanaugh/content-formatter/master.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/natecavanaugh/content-formatter?branch=master","maintainers":[{"name":"natecavanaugh","email":"nate@shift22.com"}],"time":{"modified":"2015-08-20T15:30:34.008Z","created":"2015-07-30T23:38:49.198Z","0.0.1":"2015-07-30T23:38:49.198Z","1.0.0":"2015-07-31T16:48:52.116Z","1.0.1":"2015-07-31T17:31:08.137Z","1.1.0":"2015-08-20T15:30:34.008Z"},"homepage":"https://github.com/natecavanaugh/content-formatter","keywords":[],"repository":{"type":"git","url":"https://github.com/natecavanaugh/content-formatter"},"author":{"name":"Nate Cavanaugh","email":"nate@shift22.com","url":"alterform.com"},"bugs":{"url":"https://github.com/natecavanaugh/content-formatter/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"\"1YI6XPU3ZVZH8QCH9LBWKO0QD\""}