(function() {
  describe('helpers', function() {
    var helpers;
    helpers = require('../lib/helpers');
    beforeEach(function() {
      return atom.notifications.clear();
    });
    describe('::error', function() {
      return it('adds an error notification', function() {
        helpers.error(new Error());
        return expect(atom.notifications.getNotifications().length).toBe(1);
      });
    });
    return describe('::shouldTriggerLinter', function() {
      var bufferModifying, lintOnFly, normalLinter;
      normalLinter = {
        grammarScopes: ['*'],
        scope: 'file',
        modifiesBuffer: false,
        lintOnFly: false,
        lint: function() {}
      };
      lintOnFly = {
        grammarScopes: ['*'],
        scope: 'file',
        modifiesBuffer: false,
        lintOnFly: true,
        lint: function() {}
      };
      bufferModifying = {
        grammarScopes: ['*'],
        scope: 'file',
        modifiesBuffer: true,
        lintOnFly: false,
        lint: function() {}
      };
      it('accepts a wildcard grammarScope', function() {
        return expect(helpers.shouldTriggerLinter(normalLinter, false, false, ['*'])).toBe(true);
      });
      it('runs lintOnFly ones on both save and lintOnFly', function() {
        expect(helpers.shouldTriggerLinter(lintOnFly, false, false, ['*'])).toBe(true);
        return expect(helpers.shouldTriggerLinter(lintOnFly, false, true, ['*'])).toBe(true);
      });
      it("doesn't run save ones on fly", function() {
        return expect(helpers.shouldTriggerLinter(normalLinter, false, true, ['*'])).toBe(false);
      });
      return it('runs only if bufferModifying flag matches with linter', function() {
        expect(helpers.shouldTriggerLinter(normalLinter, false, false, ['*'])).toBe(true);
        expect(helpers.shouldTriggerLinter(normalLinter, true, false, ['*'])).toBe(false);
        expect(helpers.shouldTriggerLinter(bufferModifying, false, false, ['*'])).toBe(false);
        return expect(helpers.shouldTriggerLinter(bufferModifying, true, false, ['*'])).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Rvb3QvLmF0b20vcGFja2FnZXMvbGludGVyL3NwZWMvaGVscGVycy1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsRUFBQSxRQUFBLENBQVMsU0FBVCxFQUFvQixTQUFBLEdBQUE7QUFDbEIsUUFBQSxPQUFBO0FBQUEsSUFBQSxPQUFBLEdBQVUsT0FBQSxDQUFRLGdCQUFSLENBQVYsQ0FBQTtBQUFBLElBQ0EsVUFBQSxDQUFXLFNBQUEsR0FBQTthQUNULElBQUksQ0FBQyxhQUFhLENBQUMsS0FBbkIsQ0FBQSxFQURTO0lBQUEsQ0FBWCxDQURBLENBQUE7QUFBQSxJQUlBLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUEsR0FBQTthQUNsQixFQUFBLENBQUcsNEJBQUgsRUFBaUMsU0FBQSxHQUFBO0FBQy9CLFFBQUEsT0FBTyxDQUFDLEtBQVIsQ0FBa0IsSUFBQSxLQUFBLENBQUEsQ0FBbEIsQ0FBQSxDQUFBO2VBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQW5CLENBQUEsQ0FBcUMsQ0FBQyxNQUE3QyxDQUFvRCxDQUFDLElBQXJELENBQTBELENBQTFELEVBRitCO01BQUEsQ0FBakMsRUFEa0I7SUFBQSxDQUFwQixDQUpBLENBQUE7V0FTQSxRQUFBLENBQVMsdUJBQVQsRUFBa0MsU0FBQSxHQUFBO0FBQ2hDLFVBQUEsd0NBQUE7QUFBQSxNQUFBLFlBQUEsR0FDRTtBQUFBLFFBQUEsYUFBQSxFQUFlLENBQUMsR0FBRCxDQUFmO0FBQUEsUUFDQSxLQUFBLEVBQU8sTUFEUDtBQUFBLFFBRUEsY0FBQSxFQUFnQixLQUZoQjtBQUFBLFFBR0EsU0FBQSxFQUFXLEtBSFg7QUFBQSxRQUlBLElBQUEsRUFBTSxTQUFBLEdBQUEsQ0FKTjtPQURGLENBQUE7QUFBQSxNQU1BLFNBQUEsR0FDRTtBQUFB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

//# sourceURL=/Users/doot/.atom/packages/linter/spec/helpers-spec.coffee
