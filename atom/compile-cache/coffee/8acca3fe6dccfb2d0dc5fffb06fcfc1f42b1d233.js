(function() {
  var GitCommitAmend, Path, commitFilePath, commitPane, currentPane, fs, git, pathToRepoFile, repo, textEditor, _ref;

  fs = require('fs-plus');

  Path = require('flavored-path');

  git = require('../../lib/git');

  GitCommitAmend = require('../../lib/models/git-commit-amend');

  _ref = require('../fixtures'), repo = _ref.repo, pathToRepoFile = _ref.pathToRepoFile, textEditor = _ref.textEditor, commitPane = _ref.commitPane, currentPane = _ref.currentPane;

  commitFilePath = Path.join(repo.getPath(), 'COMMIT_EDITMSG');

  describe("GitCommitAmend", function() {
    beforeEach(function() {
      spyOn(atom.workspace, 'getActivePane').andReturn(currentPane);
      spyOn(atom.workspace, 'open').andReturn(Promise.resolve(textEditor));
      spyOn(atom.workspace, 'getPanes').andReturn([currentPane, commitPane]);
      spyOn(atom.workspace, 'paneForURI').andReturn(commitPane);
      spyOn(git, 'refresh');
      spyOn(commitPane, 'destroy').andCallThrough();
      spyOn(currentPane, 'activate');
      spyOn(fs, 'unlinkSync');
      spyOn(fs, 'readFileSync').andReturn('');
      spyOn(git, 'stagedFiles').andCallFake(function() {
        var args;
        args = git.stagedFiles.mostRecentCall.args;
        if (args[0].getWorkingDirectory() === repo.getWorkingDirectory()) {
          return Promise.resolve([pathToRepoFile]);
        }
      });
      return spyOn(git, 'cmd').andCallFake(function() {
        var args;
        args = git.cmd.mostRecentCall.args[0];
        switch (args[0]) {
          case 'whatchanged':
            return Promise.resolve('last commit');
          case 'status':
            return Promise.resolve('current status');
          default:
            return Promise.resolve('');
        }
      });
    });
    it("gets the previous commit message and changed files", function() {
      var expectedGitArgs;
      expectedGitArgs = ['whatchanged', '-1', '--name-status', '--format=%B'];
      GitCommitAmend(repo);
      return expect(git.cmd).toHaveBeenCalledWith(expectedGitArgs, {
        cwd: repo.getWorkingDirectory()
      });
    });
    it("writes to the new commit file", function() {
      spyOn(fs, 'writeFileSync');
      GitCommitAmend(repo);
      waitsFor(function() {
        return fs.writeFileSync.callCount > 0;
      });
      return runs(function() {
        var actualPath;
        actualPath = fs.writeFileSync.mostRecentCall.args[0];
        return expect(actualPath).toEqual(commitFilePath);
      });
    });
    it("shows the file", function() {
      GitCommitAmend(repo);
      waitsFor(function() {
        return atom.workspace.open.callCount > 0;
      });
      return runs(function() {
        return expect(atom.workspace.open).toHaveBeenCalled();
      });
    });
    it("calls git.cmd with ['commit'...] on textEditor save", function() {
      GitCommitAmend(repo);
      textEditor.save();
      return expect(git.cmd).toHaveBeenCalledWith(['commit', '--amend', '--cleanup=strip', "--file=" + commitFilePath], {
        cwd: repo.getWorkingDirectory()
      });
    });
    it("closes the commit pane when commit is successful", function() {
      GitCommitAmend(repo);
      textEditor.save();
      waitsFor(function() {
        return commitPane.destroy.callCount > 0;
      });
      return runs(function() {
        return expect(commitPane.destroy).toHaveBeenCalled();
      });
    });
    return it("cancels the commit on textEditor destroy", function() {
      GitCommitAmend(repo);
      textEditor.destroy();
      expect(currentPane.activate).toHaveBeenCalled();
      return expect(fs.unlinkSync).toHaveBeenCalledWith(commitFilePath);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Rvb3QvLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvc3BlYy9tb2RlbHMvZ2l0LWNvbW1pdC1hbWVuZC1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSw4R0FBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsU0FBUixDQUFMLENBQUE7O0FBQUEsRUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFRLGVBQVIsQ0FEUCxDQUFBOztBQUFBLEVBR0EsR0FBQSxHQUFNLE9BQUEsQ0FBUSxlQUFSLENBSE4sQ0FBQTs7QUFBQSxFQUlBLGNBQUEsR0FBaUIsT0FBQSxDQUFRLG1DQUFSLENBSmpCLENBQUE7O0FBQUEsRUFLQSxPQU1JLE9BQUEsQ0FBUSxhQUFSLENBTkosRUFDRSxZQUFBLElBREYsRUFFRSxzQkFBQSxjQUZGLEVBR0Usa0JBQUEsVUFIRixFQUlFLGtCQUFBLFVBSkYsRUFLRSxtQkFBQSxXQVZGLENBQUE7O0FBQUEsRUFhQSxjQUFBLEdBQWlCLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBSSxDQUFDLE9BQUwsQ0FBQSxDQUFWLEVBQTBCLGdCQUExQixDQWJqQixDQUFBOztBQUFBLEVBZUEsUUFBQSxDQUFTLGdCQUFULEVBQTJCLFNBQUEsR0FBQTtBQUN6QixJQUFBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLEtBQUEsQ0FBTSxJQUFJLENBQUMsU0FBWCxFQUFzQixlQUF0QixDQUFzQyxDQUFDLFNBQXZDLENBQWlELFdBQWpELENBQUEsQ0FBQTtBQUFBLE1BQ0EsS0FBQSxDQUFNLElBQUksQ0FBQyxTQUFYLEVBQXNCLE1BQXRCLENBQTZCLENBQUMsU0FBOUIsQ0FBd0MsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsVUFBaEIsQ0FBeEMsQ0FEQSxDQUFBO0FBQUEsTUFFQSxLQUFBLENBQU0sSUFB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

//# sourceURL=/Users/doot/.atom/packages/git-plus/spec/models/git-commit-amend-spec.coffee
