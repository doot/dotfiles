(function() {
  var Project, fs, path, projects, projectsSortedByName, utils, workspaceElement;

  fs = require('fs');

  path = require('path');

  utils = require('../lib/utils');

  Project = require('../lib/models/project');

  workspaceElement = null;

  projects = null;

  projectsSortedByName = null;

  describe("Utils", function() {
    beforeEach(function() {
      var waitsForPromise;
      workspaceElement = atom.views.getView(atom.workspace);
      waitsForPromise = atom.packages.activatePackage('git-projects');
      projects = [new Project("notification"), new Project("settings-view"), new Project("atom")];
      return projectsSortedByName = [new Project("atom"), new Project("notification"), new Project("settings-view")];
    });
    describe("sortBy", function() {
      return it("sorts by name when sortBy == 'Project name'", function() {
        return expect(utils.sortBy('Project name', projects)).toEqual(projectsSortedByName);
      });
    });
    describe("parsePathString", function() {
      it("should be a function", expect(utils.parsePathString).toBeFunction);
      it("should only take strings in parameter", function() {
        var wrapper;
        wrapper = function(any) {
          return utils.parsePathString.bind(this, any);
        };
        expect(wrapper("")).not.toThrow;
        expect(wrapper(1)).toThrow;
        return expect(wrapper(null)).toThrow;
      });
      return it("should return a Set", function() {
        expect(utils.parsePathString("")).toEqual(new Set(["."]));
        expect(utils.parsePathString("path").size).toBe(1);
        expect(utils.parsePathString("path; another_path").size).toBe(2);
        expect(utils.parsePathString("same_path; same_path").size).toBe(1);
        return expect(utils.parsePathString("~").size).toBe(1);
      });
    });
    return describe("isRepositorySync", function() {
      it("should be a function", expect(utils.isRepositorySync).toBeFunction);
      return it("should return false if no params", function() {
        return expect(utils.isRepositorySync()).toBe(false);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Rvb3QvLmF0b20vcGFja2FnZXMvZ2l0LXByb2plY3RzL3NwZWMvdXRpbHMtc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsMEVBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FBTCxDQUFBOztBQUFBLEVBQ0EsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRFAsQ0FBQTs7QUFBQSxFQUVBLEtBQUEsR0FBUSxPQUFBLENBQVEsY0FBUixDQUZSLENBQUE7O0FBQUEsRUFHQSxPQUFBLEdBQVUsT0FBQSxDQUFRLHVCQUFSLENBSFYsQ0FBQTs7QUFBQSxFQUtBLGdCQUFBLEdBQW1CLElBTG5CLENBQUE7O0FBQUEsRUFNQSxRQUFBLEdBQVcsSUFOWCxDQUFBOztBQUFBLEVBT0Esb0JBQUEsR0FBdUIsSUFQdkIsQ0FBQTs7QUFBQSxFQVNBLFFBQUEsQ0FBUyxPQUFULEVBQWtCLFNBQUEsR0FBQTtBQUVoQixJQUFBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxVQUFBLGVBQUE7QUFBQSxNQUFBLGdCQUFBLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBWCxDQUFtQixJQUFJLENBQUMsU0FBeEIsQ0FBbkIsQ0FBQTtBQUFBLE1BQ0EsZUFBQSxHQUFrQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWQsQ0FBOEIsY0FBOUIsQ0FEbEIsQ0FBQTtBQUFBLE1BRUEsUUFBQSxHQUFXLENBQUssSUFBQSxPQUFBLENBQVEsY0FBUixDQUFMLEVBQWtDLElBQUEsT0FBQSxDQUFRLGVBQVIsQ0FBbEMsRUFBZ0UsSUFBQSxPQUFBLENBQVEsTUFBUixDQUFoRSxDQUZYLENBQUE7YUFHQSxvQkFBQSxHQUF1QixDQUFLLElBQUEsT0FBQSxDQUFRLE1BQVIsQ0FBTCxFQUEwQixJQUFBLE9BQUEs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

//# sourceURL=/Users/doot/.atom/packages/git-projects/spec/utils-spec.coffee
