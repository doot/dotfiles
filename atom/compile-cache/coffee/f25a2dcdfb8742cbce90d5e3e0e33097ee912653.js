(function() {
  var RefCountedTokenList;

  RefCountedTokenList = require('../lib/ref-counted-token-list');

  describe('RefCountedTokenList', function() {
    var list;
    list = [][0];
    beforeEach(function() {
      return list = new RefCountedTokenList;
    });
    describe("::refCountForToken()", function() {
      return it("returns the correct count", function() {
        list.addToken('abc');
        expect(list.refCountForToken('abc')).toBe(1);
        list.addToken('abc');
        list.addToken('def');
        expect(list.refCountForToken('abc')).toBe(2);
        list.removeToken('abc');
        expect(list.refCountForToken('abc')).toBe(1);
        list.removeToken('abc');
        expect(list.refCountForToken('abc')).toBe(0);
        list.removeToken('abc');
        return expect(list.refCountForToken('abc')).toBe(0);
      });
    });
    describe("when tokens are added to and removed from the list", function() {
      return it("maintains the token in the list until there are no more references", function() {
        expect(list.getTokens()).toEqual([]);
        list.addToken('abc');
        expect(list.getTokens()).toEqual(['abc']);
        expect(list.refCountForToken('abc')).toBe(1);
        list.addToken('abc');
        list.addToken('def');
        expect(list.getTokens()).toEqual(['abc', 'def']);
        expect(list.refCountForToken('abc')).toBe(2);
        list.removeToken('abc');
        expect(list.getTokens()).toEqual(['abc', 'def']);
        expect(list.refCountForToken('abc')).toBe(1);
        list.removeToken('def');
        expect(list.getTokens()).toEqual(['abc']);
        list.removeToken('abc');
        expect(list.getTokens()).toEqual([]);
        list.removeToken('abc');
        return expect(list.getTokens()).toEqual([]);
      });
    });
    return describe("when object tokens are added to and removed from the list", function() {
      describe("when the same tokens are used", function() {
        return it("maintains the token in the list until there are no more references", function() {
          var abcToken, defToken;
          expect(list.getTokens()).toEqual([]);
          abcToken = {
            text: 'abc'
          };
          defToken = {
            text: 'def'
          };
          list.addToken(abcToken, 'abc');
          expect(list.getTokens()).toEqual([abcToken]);
          list.addToken(abcToken, 'abc');
          list.addToken(defToken, 'def');
          expect(list.getTokens()).toEqual([abcToken, defToken]);
          list.removeToken(abcToken, 'abc');
          expect(list.getTokens()).toEqual([abcToken, defToken]);
          list.removeToken(defToken, 'def');
          expect(list.getTokens()).toEqual([abcToken]);
          list.removeToken(abcToken, 'abc');
          expect(list.getTokens()).toEqual([]);
          list.removeToken(abcToken, 'abc');
          return expect(list.getTokens()).toEqual([]);
        });
      });
      return describe("when tokens with the same key are used", function() {
        return it("maintains the token in the list until there are no more references", function() {
          expect(list.getTokens()).toEqual([]);
          list.addToken({
            text: 'abc'
          }, 'abc');
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }
          ]);
          list.addToken({
            text: 'abc'
          }, 'abc');
          list.addToken({
            text: 'def'
          }, 'def');
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }, {
              text: 'def'
            }
          ]);
          expect(list.removeToken({
            text: 'abc'
          }, 'abc')).toBe(true);
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }, {
              text: 'def'
            }
          ]);
          expect(list.removeToken('def')).toBe(true);
          expect(list.getTokens()).toEqual([
            {
              text: 'abc'
            }
          ]);
          expect(list.removeToken('abc')).toBe(true);
          expect(list.getTokens()).toEqual([]);
          expect(list.removeToken('abc')).toBe(false);
          return expect(list.getTokens()).toEqual([]);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Rvb3QvLmF0b20vcGFja2FnZXMvYXV0b2NvbXBsZXRlLXBsdXMvc3BlYy9yZWYtY291bnRlZC10b2tlbi1saXN0LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLG1CQUFBOztBQUFBLEVBQUEsbUJBQUEsR0FBc0IsT0FBQSxDQUFRLCtCQUFSLENBQXRCLENBQUE7O0FBQUEsRUFFQSxRQUFBLENBQVMscUJBQVQsRUFBZ0MsU0FBQSxHQUFBO0FBQzlCLFFBQUEsSUFBQTtBQUFBLElBQUMsT0FBUSxLQUFULENBQUE7QUFBQSxJQUNBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7YUFDVCxJQUFBLEdBQU8sR0FBQSxDQUFBLG9CQURFO0lBQUEsQ0FBWCxDQURBLENBQUE7QUFBQSxJQUlBLFFBQUEsQ0FBUyxzQkFBVCxFQUFpQyxTQUFBLEdBQUE7YUFDL0IsRUFBQSxDQUFHLDJCQUFILEVBQWdDLFNBQUEsR0FBQTtBQUM5QixRQUFBLElBQUksQ0FBQyxRQUFMLENBQWMsS0FBZCxDQUFBLENBQUE7QUFBQSxRQUNBLE1BQUEsQ0FBTyxJQUFJLENBQUMsZ0JBQUwsQ0FBc0IsS0FBdEIsQ0FBUCxDQUFvQyxDQUFDLElBQXJDLENBQTBDLENBQTFDLENBREEsQ0FBQTtBQUFBLFFBR0EsSUFBSSxDQUFDLFFBQUwsQ0FBYyxLQUFkLENBSEEsQ0FBQTtBQUFBLFFBSUEsSUFBSSxDQUFDLFFBQUwsQ0FBYyxLQUFkLENBSkEsQ0FBQTtBQUFBLFFBS0EsTUFBQSxDQUFPLElBQUksQ0FBQyxnQkFBTCxDQUFzQixLQUF0QixDQUFQLENBQW9DLENBQUMsSUFBckMsQ0FBMEMsQ0FBMUMsQ0FMQSxDQUFBO0FBQUEsUUFPQSxJQUFJLENBQUMsV0FBTCxDQUFpQixLQUFqQixDQVBBLENBQUE7QUFBQSxRQVFBLE1BQUEsQ0FBTyxJQUFJ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

//# sourceURL=/Users/doot/.atom/packages/autocomplete-plus/spec/ref-counted-token-list-spec.coffee
